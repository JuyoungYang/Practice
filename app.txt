Vim에디터꺼
git difftool 현재파일 수정사항 시각적으로 보여줌
다보고 나갈려면 :qa 하면 댐

difftool 할 때 빔꺼 쓰기 싫으면
git config --global diff.tool vscode
git config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'
 
git branch <이름>
git switch <이름>

git add . 
git add <파일이름.확장자>

git commit -m "메세지"

git log --oneline --all -gragh

HEAD -> coupon
여기서 HEAD는 내 위치를 나타냄


git branch 브랜치명
: 새로운 브랜치를 만들지만 현재 브랜치에 그대로 머무름.
git switch -c 브랜치명
: 새로운 브랜치를 만들고 바로 그 브랜치로 이동.


merge 하고 싶으면
1. main/master 브랜치로 다시 이동하고
2. git merge 브랜치명 입력하면 합쳐짐

rebase&merge하고 싶으면
1. 새로운 브랜치로 가서
2. git rebase 중심브랜치명

git switch 새로운브랜치
git rebase main

git switch main
git merge 새로운브랜치
차례로 입력하면 rebase 끝
브랜치끼리 차이가 너무 많은 경우 rebase하면 충돌이 많이 발생할 수 있음


git merge coupon을 하면
coupon 브랜치의 코드들이 
main/master 브랜치에 합쳐짐

master(main) 브랜치와 coupon 브랜치에서 
같은 파일, 같은 줄을 수정했을 경우 merge conflict 가 발생
이 경우 에디터로 해당 파일을 열어보면 충돌사항이 적혀있음

둘 중 어떤 코드를 적용할지 고르면 되는데 
<<<< / >>>> / ==== 이런 쓸데없는 것들은 다 지우고 원하는 코드만 남기면 댐
(VSCode는 Accept Incoming Change 어쩌구 버튼들 누르면 편함)

어떤 코드를 남길지 결정했으면 
git add 파일명
git commit -m '메세지'
입력하면 새로운 commit 을 생성해주며 merge conflict 해결 + 브랜치 합치기 완료


머지 완료된 브랜치 삭제는
git branch -d <브랜치명>

머지 안한 브랜치 삭제는
git branch -D <브랜치명>


3-way merge
브랜치에 각각 신규 commit이 1회 이상 있는 경우 
merge 명령을 내리면 두 브랜치의 코드를 합쳐서 새로운 commit을 자동으로 생성해주는것

fast-forward merge
새로운 브랜치에만 commit 이 있고
기준이 되는 브랜치에는 신규 commit 이 없는 경우
딱히 합칠게 없어서 그냥 신규브랜치 보고
"지금부터 니 이름은 main 브랜치여" 하는 것
"기준이 되는 브랜치에 신규 commit이 없으면" 자동으로 fast-forward merge가 발동
싫으면 git merge --no-ff 브랜치명 해서 강제로 3-way merge 할 수도 있음


터미널에서 이그노어 수정하기
nano .gitignore
 merge --squash  브랜치에서 만들어놨던 많은 commit 을 다 합쳐서 
 하나의 commit으로 main 브랜치에 생성해줌
 

언젠가 팀장이 되면 GitFlow 알아야함
1. main
2. develop(개발용)
3. feature(develop에 기능추가용)
4. release(develop 브랜치를 main 브랜치에 합치기 전에 최종 테스트용)
5. hotfix(main 브랜치 버그해결용)


Trunk-based 전략 
코드짠걸 바로 대중에 배포를 해도 상관없는 프로그램이면
그리고 크게 대격변 업데이트를 안하는 안정적인 프로그램이면 
1. 기능추가, 버그픽스가 필요하면 main 브랜치에서 새로운 브랜치를 하나 만들어서 코드짭니다.
브랜치마다 작명 잘하는게 중요합니다. 
2. 기능이 완성되었으면 main 브랜치에 합칩니다.
이제 브랜치 쓸데없으니 삭제합니다.
3. main 브랜치에 있는 코드를 필요할 때 마다 유저들에게 배포합니다.


git stash
터미널에 git stash 입력하면 방금 작성한 bbbb 어쩌구 코드는 잠깐 다른 공간에 보관됩니다. 
(그래서 파일들이 최근 commit 상태로 되돌아갑니다.)
- staging 된 것이든 안된 것이든 추적중인 파일은 다 이동됩니다.
- 새로 만든 파일인데 staging 안되었다면 이동안됩니다. 

git stash save "bbb 코드짰는데 망함"

git stash list
git stash는 여러번 할 수 있습니다.
현재 stash 되어있는 코드 목록을 전부 출력해주는 명령어입니다. 

git stash pop
이러면 잠깐 보관했던 코드를 다시 불러옵니다. 
git stash 했던 코드가 여러개 있으면 가장 최근에 보관했던 코드부터 먼저 불러옵니다. 

git stash drop 삭제할id
git stash clear
위에건 특정 stash 삭제, 
밑에건 모든 stash 삭제하는 명령어
삭제할 id는 git stash list 하면 보이는 0, 1, 2 이런 숫자 넣으면 됩니다.

git stash -p 
전체 말고 일부 코드만 git stash 하고싶으면 이거 씁시다.
그럼 파일을 훑어주면서 stash 할 지 의견을 물어보는데 y/n 으로 잘 대답하면 됩니다. 